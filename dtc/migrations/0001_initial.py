# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2017-01-27 08:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccountEmailaddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=254, unique=True)),
                ('verified', models.BooleanField()),
                ('primary', models.BooleanField()),
            ],
            options={
                'db_table': 'account_emailaddress',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountEmailconfirmation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('sent', models.DateTimeField(blank=True, null=True)),
                ('key', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'db_table': 'account_emailconfirmation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('action_type', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=200)),
                ('parent_type', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'action_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Activities',
            fields=[
                ('activity_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('standard_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('published_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('published_units', models.CharField(blank=True, max_length=100, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.CharField(blank=True, max_length=100, null=True)),
                ('standard_flag', models.SmallIntegerField(blank=True, null=True)),
                ('standard_type', models.CharField(blank=True, max_length=250, null=True)),
                ('activity_comment', models.CharField(blank=True, max_length=4000, null=True)),
                ('published_type', models.CharField(blank=True, max_length=250, null=True)),
                ('potential_duplicate', models.SmallIntegerField(blank=True, null=True)),
                ('published_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('pchembl_value', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('uo_units', models.CharField(blank=True, max_length=10, null=True)),
                ('qudt_units', models.CharField(blank=True, max_length=70, null=True)),
            ],
            options={
                'db_table': 'activities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActivityStdsLookup',
            fields=[
                ('std_act_id', models.IntegerField(primary_key=True, serialize=False)),
                ('standard_type', models.CharField(max_length=250)),
                ('definition', models.CharField(blank=True, max_length=500, null=True)),
                ('standard_units', models.CharField(max_length=100)),
                ('normal_range_min', models.DecimalField(blank=True, decimal_places=12, max_digits=24, null=True)),
                ('normal_range_max', models.DecimalField(blank=True, decimal_places=12, max_digits=24, null=True)),
            ],
            options={
                'db_table': 'activity_stds_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnalyticsAnalytics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'analytics_analytics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Anastassiadis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anastassiadis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssayActionMode',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assay_action_mode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssayDetectionTechnology',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assay_detection_technology',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssayFormat',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assay_format',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssayInhibitorType',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assay_inhibitor_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssayParameters',
            fields=[
                ('assay_param_id', models.IntegerField(primary_key=True, serialize=False)),
                ('parameter_value', models.CharField(max_length=2000)),
            ],
            options={
                'db_table': 'assay_parameters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Assays',
            fields=[
                ('assay_id', models.IntegerField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
                ('assay_test_type', models.CharField(blank=True, max_length=20, null=True)),
                ('assay_category', models.CharField(blank=True, max_length=20, null=True)),
                ('assay_organism', models.CharField(blank=True, max_length=250, null=True)),
                ('assay_tax_id', models.BigIntegerField(blank=True, null=True)),
                ('assay_strain', models.CharField(blank=True, max_length=200, null=True)),
                ('assay_tissue', models.CharField(blank=True, max_length=100, null=True)),
                ('assay_cell_type', models.CharField(blank=True, max_length=100, null=True)),
                ('assay_subcellular_fraction', models.CharField(blank=True, max_length=100, null=True)),
                ('src_assay_id', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'assays',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssaySubType',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assay_sub_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssayType',
            fields=[
                ('assay_type', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('assay_desc', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'db_table': 'assay_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AtcClassification',
            fields=[
                ('who_name', models.CharField(blank=True, max_length=150, null=True)),
                ('level1', models.CharField(blank=True, max_length=10, null=True)),
                ('level2', models.CharField(blank=True, max_length=10, null=True)),
                ('level3', models.CharField(blank=True, max_length=10, null=True)),
                ('level4', models.CharField(blank=True, max_length=10, null=True)),
                ('level5', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('who_id', models.CharField(blank=True, max_length=15, null=True)),
                ('level1_description', models.CharField(blank=True, max_length=150, null=True)),
                ('level2_description', models.CharField(blank=True, max_length=150, null=True)),
                ('level3_description', models.CharField(blank=True, max_length=150, null=True)),
                ('level4_description', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'atc_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BindingSites',
            fields=[
                ('site_id', models.IntegerField(primary_key=True, serialize=False)),
                ('site_name', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'binding_sites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioassayOntology',
            fields=[
                ('bao_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'bioassay_ontology',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioComponentSequences',
            fields=[
                ('component_id', models.IntegerField(primary_key=True, serialize=False)),
                ('component_type', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('sequence', models.TextField(blank=True, null=True)),
                ('sequence_md5sum', models.CharField(blank=True, max_length=32, null=True)),
                ('tax_id', models.BigIntegerField(blank=True, null=True)),
                ('organism', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'bio_component_sequences',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BiotherapeuticComponents',
            fields=[
                ('biocomp_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'biotherapeutic_components',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ccle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('source_id', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ccle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CellDictionary',
            fields=[
                ('cell_id', models.IntegerField(primary_key=True, serialize=False)),
                ('cell_name', models.CharField(max_length=50)),
                ('cell_description', models.CharField(blank=True, max_length=200, null=True)),
                ('cell_source_tissue', models.CharField(blank=True, max_length=50, null=True)),
                ('cell_source_organism', models.CharField(blank=True, max_length=150, null=True)),
                ('cell_source_tax_id', models.BigIntegerField(blank=True, null=True)),
                ('clo_id', models.CharField(blank=True, max_length=11, null=True)),
                ('efo_id', models.CharField(blank=True, max_length=12, null=True)),
                ('cellosaurus_id', models.CharField(blank=True, max_length=15, null=True)),
                ('cl_lincs_id', models.CharField(blank=True, max_length=8, null=True)),
            ],
            options={
                'db_table': 'cell_dictionary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChemblIdLookup',
            fields=[
                ('chembl_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('entity_type', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField()),
                ('status', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'chembl_id_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentClass',
            fields=[
                ('comp_class_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'component_class',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentDomains',
            fields=[
                ('compd_id', models.IntegerField(primary_key=True, serialize=False)),
                ('start_position', models.IntegerField(blank=True, null=True)),
                ('end_position', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'component_domains',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentGo',
            fields=[
                ('comp_go_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'component_go',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentSequences',
            fields=[
                ('component_id', models.IntegerField(primary_key=True, serialize=False)),
                ('component_type', models.CharField(blank=True, max_length=50, null=True)),
                ('accession', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('sequence', models.TextField(blank=True, null=True)),
                ('sequence_md5sum', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('tax_id', models.BigIntegerField(blank=True, null=True)),
                ('organism', models.CharField(blank=True, max_length=150, null=True)),
                ('db_source', models.CharField(blank=True, max_length=25, null=True)),
                ('db_version', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'component_sequences',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentSynonyms',
            fields=[
                ('compsyn_id', models.IntegerField(primary_key=True, serialize=False)),
                ('component_synonym', models.CharField(blank=True, max_length=500, null=True)),
                ('syn_type', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'component_synonyms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundIdMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src_id', models.BigIntegerField(blank=True, null=True)),
                ('compound_id', models.CharField(blank=True, max_length=400, null=True)),
                ('standardinchikey', models.CharField(blank=True, max_length=30, null=True)),
                ('uci', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'compound_id_mapping',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundIdMappings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src_id', models.BigIntegerField(blank=True, null=True)),
                ('compound_id', models.CharField(blank=True, max_length=80, null=True)),
                ('compound_name', models.CharField(blank=True, max_length=4000, null=True)),
                ('standardinchikey', models.CharField(blank=True, max_length=30, null=True)),
                ('molregno', models.IntegerField()),
                ('uci', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'compound_id_mappings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'compound_names',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundPrefNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pref_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'compound_pref_names',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundRecords',
            fields=[
                ('record_id', models.IntegerField(primary_key=True, serialize=False)),
                ('compound_key', models.CharField(blank=True, max_length=250, null=True)),
                ('compound_name', models.CharField(blank=True, max_length=4000, null=True)),
                ('src_compound_id', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'compound_records',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundStructuralAlerts',
            fields=[
                ('cpd_str_alert_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'compound_structural_alerts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundSynonyms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synonyms', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'compound_synonyms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ConfidenceScoreLookup',
            fields=[
                ('confidence_score', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
                ('target_mapping', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'confidence_score_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CuratedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubmed_id', models.BigIntegerField(blank=True, null=True)),
                ('assay_id', models.IntegerField(blank=True, null=True)),
                ('assay_sub_type_id', models.SmallIntegerField(blank=True, null=True)),
                ('inhibitor_type_id', models.SmallIntegerField(blank=True, null=True)),
                ('annotation_comments', models.CharField(blank=True, max_length=4000, null=True)),
                ('status_id', models.CharField(blank=True, max_length=10, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
                ('assay_cell_line', models.TextField(blank=True, null=True)),
                ('wildtype_or_mutant', models.TextField(blank=True, null=True)),
                ('mut_info', models.TextField(blank=True, null=True)),
                ('substrate_type', models.TextField(blank=True, null=True)),
                ('compound_single_conc_value', models.CharField(blank=True, max_length=50, null=True)),
                ('curator_email', models.TextField(blank=True, null=True)),
                ('compound_id', models.CharField(blank=True, max_length=30, null=True)),
                ('target_id', models.CharField(blank=True, max_length=250, null=True)),
                ('target_pref_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ep_standard_type', models.CharField(blank=True, max_length=250, null=True)),
                ('ep_standard_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('ep_standard_value', models.CharField(blank=True, max_length=50, null=True)),
                ('ep_standard_units', models.CharField(blank=True, max_length=100, null=True)),
                ('activity_comment', models.TextField(blank=True, null=True)),
                ('cscv_stand_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('subs_standard_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('subs_standard_value', models.CharField(blank=True, max_length=50, null=True)),
                ('subs_stand_units', models.CharField(blank=True, max_length=100, null=True)),
                ('assay_description', models.TextField(blank=True, null=True)),
                ('journal', models.CharField(blank=True, max_length=50, null=True)),
                ('field_year', models.IntegerField(blank=True, db_column='_year', null=True)),
                ('volume', models.CharField(blank=True, max_length=50, null=True)),
                ('issue', models.CharField(blank=True, max_length=50, null=True)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('authors', models.CharField(blank=True, max_length=4000, null=True)),
                ('compound_name', models.CharField(blank=True, max_length=4000, null=True)),
                ('tid', models.IntegerField(blank=True, null=True)),
                ('activity_id', models.BigIntegerField(blank=True, null=True)),
                ('record_id', models.IntegerField(blank=True, null=True)),
                ('doc_id', models.IntegerField(blank=True, null=True)),
                ('molregno', models.IntegerField(blank=True, null=True)),
                ('standard_inchi_key', models.CharField(blank=True, max_length=27, null=True)),
                ('weblink', models.CharField(blank=True, max_length=200, null=True)),
                ('data_resource', models.CharField(blank=True, max_length=50, null=True)),
                ('gene_names', models.CharField(blank=True, max_length=800, null=True)),
            ],
            options={
                'db_table': 'curated_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CurationLookup',
            fields=[
                ('curated_by', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'curation_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayActionMode',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_action_mode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayActionModeAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('userid', models.TextField()),
                ('pk_id', models.SmallIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=80, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_action_mode_audit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayDetectionTechnology',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_detection_technology',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayDetectionTechnologyAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('userid', models.TextField()),
                ('pk_id', models.SmallIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=80, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_detection_technology_audit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayFormat',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_format',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayFormatAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('userid', models.TextField()),
                ('pk_id', models.SmallIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=80, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_format_audit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayInhibitorType',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_inhibitor_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayInhibitorTypeAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('userid', models.TextField()),
                ('pk_id', models.SmallIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=80, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_inhibitor_type_audit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssaySubType',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_sub_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssaySubTypeAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('userid', models.TextField()),
                ('pk_id', models.SmallIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=80, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_sub_type_audit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayType',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAssayTypeAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('userid', models.TextField()),
                ('pk_id', models.SmallIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=80, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cv_assay_type_audit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataValidityLookup',
            fields=[
                ('data_validity_comment', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'data_validity_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Davis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'davis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DavisKaraman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('fimm_id', models.TextField(blank=True, null=True)),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('gene_symbol', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
                ('mutation_status', models.TextField(blank=True, null=True)),
                ('mutation', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'davis_karaman',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DavisMut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('fimm_id', models.TextField(blank=True, null=True)),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('gene_symbol', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
                ('mutation_status', models.TextField(blank=True, null=True)),
                ('mutation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'davis_mut',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DefinedDailyDose',
            fields=[
                ('ddd_value', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('ddd_units', models.CharField(blank=True, max_length=20, null=True)),
                ('ddd_admr', models.CharField(blank=True, max_length=30, null=True)),
                ('ddd_comment', models.CharField(blank=True, max_length=400, null=True)),
                ('ddd_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'defined_daily_dose',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'django_site',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Docs',
            fields=[
                ('doc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('journal', models.CharField(blank=True, max_length=50, null=True)),
                ('year', models.SmallIntegerField(blank=True, null=True)),
                ('volume', models.CharField(blank=True, max_length=50, null=True)),
                ('issue', models.CharField(blank=True, max_length=50, null=True)),
                ('first_page', models.CharField(blank=True, max_length=50, null=True)),
                ('last_page', models.CharField(blank=True, max_length=50, null=True)),
                ('pubmed_id', models.BigIntegerField(blank=True, null=True, unique=True)),
                ('doi', models.CharField(blank=True, max_length=50, null=True)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('doc_type', models.CharField(max_length=50)),
                ('authors', models.CharField(blank=True, max_length=4000, null=True)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('patent_id', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'docs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Domains',
            fields=[
                ('domain_id', models.IntegerField(primary_key=True, serialize=False)),
                ('domain_type', models.CharField(max_length=20)),
                ('source_domain_id', models.CharField(max_length=20)),
                ('domain_name', models.CharField(blank=True, max_length=20, null=True)),
                ('domain_description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'domains',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugIndication',
            fields=[
                ('drugind_id', models.IntegerField(primary_key=True, serialize=False)),
                ('max_phase_for_ind', models.SmallIntegerField(blank=True, null=True)),
                ('mesh_id', models.CharField(max_length=7)),
                ('mesh_heading', models.CharField(max_length=200)),
                ('efo_id', models.CharField(blank=True, max_length=20, null=True)),
                ('efo_term', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'drug_indication',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrugMechanism',
            fields=[
                ('mec_id', models.IntegerField(primary_key=True, serialize=False)),
                ('mechanism_of_action', models.CharField(blank=True, max_length=250, null=True)),
                ('direct_interaction', models.SmallIntegerField(blank=True, null=True)),
                ('molecular_mechanism', models.SmallIntegerField(blank=True, null=True)),
                ('disease_efficacy', models.SmallIntegerField(blank=True, null=True)),
                ('mechanism_comment', models.CharField(blank=True, max_length=500, null=True)),
                ('selectivity_comment', models.CharField(blank=True, max_length=100, null=True)),
                ('binding_site_comment', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'drug_mechanism',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DtcAnnotationLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wildtype_or_mutant', models.CharField(blank=True, max_length=30, null=True)),
                ('mutation_info', models.CharField(blank=True, max_length=50, null=True)),
                ('compound_concentration_value', models.CharField(blank=True, max_length=30, null=True)),
                ('compound_concentration_value_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('substrate_type', models.TextField(blank=True, null=True)),
                ('substrate_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('substrate_value', models.CharField(blank=True, max_length=50, null=True)),
                ('substrate_units', models.CharField(blank=True, max_length=100, null=True)),
                ('curator_email', models.TextField(blank=True, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
                ('annotation_comments', models.CharField(blank=True, max_length=4000, null=True)),
                ('annotations_flag', models.NullBooleanField()),
            ],
            options={
                'db_table': 'dtc_annotation_layer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Fabian',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('fimm_id', models.TextField(blank=True, null=True)),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('gene_symbol', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
                ('mutation_status', models.TextField(blank=True, null=True)),
                ('mutation', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fabian',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Formulations',
            fields=[
                ('ingredient', models.CharField(blank=True, max_length=200, null=True)),
                ('strength', models.CharField(blank=True, max_length=200, null=True)),
                ('formulation_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'formulations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FracClassification',
            fields=[
                ('frac_class_id', models.IntegerField(primary_key=True, serialize=False)),
                ('active_ingredient', models.CharField(max_length=500)),
                ('level1', models.CharField(max_length=2)),
                ('level1_description', models.CharField(max_length=2000)),
                ('level2', models.CharField(max_length=2)),
                ('level2_description', models.CharField(blank=True, max_length=2000, null=True)),
                ('level3', models.CharField(max_length=6)),
                ('level3_description', models.CharField(blank=True, max_length=2000, null=True)),
                ('level4', models.CharField(max_length=7)),
                ('level4_description', models.CharField(blank=True, max_length=2000, null=True)),
                ('level5', models.CharField(max_length=8, unique=True)),
                ('frac_code', models.CharField(max_length=4)),
            ],
            options={
                'db_table': 'frac_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GoClassification',
            fields=[
                ('go_id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('parent_go_id', models.CharField(blank=True, max_length=10, null=True)),
                ('pref_name', models.CharField(blank=True, max_length=200, null=True)),
                ('class_level', models.SmallIntegerField(blank=True, null=True)),
                ('aspect', models.CharField(blank=True, max_length=1, null=True)),
                ('path', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'go_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Gsk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('source_id', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gsk',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HracClassification',
            fields=[
                ('hrac_class_id', models.IntegerField(primary_key=True, serialize=False)),
                ('active_ingredient', models.CharField(max_length=500)),
                ('level1', models.CharField(max_length=2)),
                ('level1_description', models.CharField(max_length=2000)),
                ('level2', models.CharField(max_length=3)),
                ('level2_description', models.CharField(blank=True, max_length=2000, null=True)),
                ('level3', models.CharField(max_length=5, unique=True)),
                ('hrac_code', models.CharField(max_length=2)),
            ],
            options={
                'db_table': 'hrac_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IndicationRefs',
            fields=[
                ('indref_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ref_type', models.CharField(max_length=50)),
                ('ref_id', models.CharField(max_length=2000)),
                ('ref_url', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'indication_refs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IracClassification',
            fields=[
                ('irac_class_id', models.IntegerField(primary_key=True, serialize=False)),
                ('active_ingredient', models.CharField(max_length=500)),
                ('level1', models.CharField(max_length=1)),
                ('level1_description', models.CharField(max_length=2000)),
                ('level2', models.CharField(max_length=3)),
                ('level2_description', models.CharField(max_length=2000)),
                ('level3', models.CharField(max_length=6)),
                ('level3_description', models.CharField(max_length=2000)),
                ('level4', models.CharField(max_length=8, unique=True)),
                ('irac_code', models.CharField(max_length=3)),
            ],
            options={
                'db_table': 'irac_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MechanismRefs',
            fields=[
                ('mecref_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ref_type', models.CharField(max_length=50)),
                ('ref_id', models.CharField(blank=True, max_length=200, null=True)),
                ('ref_url', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'db_table': 'mechanism_refs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metabolism',
            fields=[
                ('met_id', models.IntegerField(primary_key=True, serialize=False)),
                ('pathway_id', models.IntegerField(blank=True, null=True)),
                ('pathway_key', models.CharField(blank=True, max_length=50, null=True)),
                ('enzyme_name', models.CharField(blank=True, max_length=200, null=True)),
                ('met_conversion', models.CharField(blank=True, max_length=200, null=True)),
                ('organism', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_id', models.BigIntegerField(blank=True, null=True)),
                ('met_comment', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'metabolism',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetabolismRefs',
            fields=[
                ('metref_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ref_type', models.CharField(max_length=50)),
                ('ref_id', models.CharField(blank=True, max_length=200, null=True)),
                ('ref_url', models.CharField(blank=True, max_length=400, null=True)),
            ],
            options={
                'db_table': 'metabolism_refs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'metz',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeAtcClassification',
            fields=[
                ('mol_atc_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'molecule_atc_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeDictionary',
            fields=[
                ('molregno', models.IntegerField(primary_key=True, serialize=False)),
                ('pref_name', models.CharField(blank=True, max_length=255, null=True)),
                ('max_phase', models.SmallIntegerField()),
                ('therapeutic_flag', models.SmallIntegerField()),
                ('dosed_ingredient', models.SmallIntegerField()),
                ('structure_type', models.CharField(max_length=10)),
                ('chebi_par_id', models.IntegerField(blank=True, null=True)),
                ('molecule_type', models.CharField(blank=True, max_length=30, null=True)),
                ('first_approval', models.SmallIntegerField(blank=True, null=True)),
                ('oral', models.SmallIntegerField()),
                ('parenteral', models.SmallIntegerField()),
                ('topical', models.SmallIntegerField()),
                ('black_box_warning', models.SmallIntegerField()),
                ('natural_product', models.SmallIntegerField()),
                ('first_in_class', models.SmallIntegerField()),
                ('chirality', models.SmallIntegerField()),
                ('prodrug', models.SmallIntegerField()),
                ('inorganic_flag', models.SmallIntegerField()),
                ('usan_year', models.SmallIntegerField(blank=True, null=True)),
                ('availability_type', models.SmallIntegerField(blank=True, null=True)),
                ('usan_stem', models.CharField(blank=True, max_length=50, null=True)),
                ('polymer_flag', models.SmallIntegerField(blank=True, null=True)),
                ('usan_substem', models.CharField(blank=True, max_length=50, null=True)),
                ('usan_stem_definition', models.CharField(blank=True, max_length=1000, null=True)),
                ('indication_class', models.CharField(blank=True, max_length=1000, null=True)),
                ('withdrawn_flag', models.SmallIntegerField()),
                ('withdrawn_year', models.SmallIntegerField(blank=True, null=True)),
                ('withdrawn_country', models.CharField(blank=True, max_length=2000, null=True)),
                ('withdrawn_reason', models.CharField(blank=True, max_length=2000, null=True)),
            ],
            options={
                'db_table': 'molecule_dictionary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeFracClassification',
            fields=[
                ('mol_frac_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'molecule_frac_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeHracClassification',
            fields=[
                ('mol_hrac_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'molecule_hrac_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeIracClassification',
            fields=[
                ('mol_irac_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'molecule_irac_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeSynonyms',
            fields=[
                ('synonyms', models.CharField(blank=True, max_length=200, null=True)),
                ('syn_type', models.CharField(max_length=50)),
                ('molsyn_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'molecule_synonyms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrganismClass',
            fields=[
                ('oc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tax_id', models.BigIntegerField(blank=True, null=True, unique=True)),
                ('l1', models.CharField(blank=True, max_length=200, null=True)),
                ('l2', models.CharField(blank=True, max_length=200, null=True)),
                ('l3', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'organism_class',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ParameterType',
            fields=[
                ('parameter_type', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
            ],
            options={
                'db_table': 'parameter_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PatentUseCodes',
            fields=[
                ('patent_use_code', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('definition', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'patent_use_codes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PredictedBindingDomains',
            fields=[
                ('predbind_id', models.IntegerField(primary_key=True, serialize=False)),
                ('prediction_method', models.CharField(blank=True, max_length=50, null=True)),
                ('confidence', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'predicted_binding_domains',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductPatents',
            fields=[
                ('prod_pat_id', models.IntegerField(primary_key=True, serialize=False)),
                ('patent_no', models.CharField(max_length=11)),
                ('patent_expire_date', models.DateField()),
                ('drug_substance_flag', models.SmallIntegerField()),
                ('drug_product_flag', models.SmallIntegerField()),
                ('delist_flag', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'product_patents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('dosage_form', models.CharField(blank=True, max_length=200, null=True)),
                ('route', models.CharField(blank=True, max_length=200, null=True)),
                ('trade_name', models.CharField(blank=True, max_length=200, null=True)),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('ad_type', models.CharField(blank=True, max_length=5, null=True)),
                ('oral', models.SmallIntegerField(blank=True, null=True)),
                ('topical', models.SmallIntegerField(blank=True, null=True)),
                ('parenteral', models.SmallIntegerField(blank=True, null=True)),
                ('black_box_warning', models.SmallIntegerField(blank=True, null=True)),
                ('applicant_full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('innovator_company', models.SmallIntegerField(blank=True, null=True)),
                ('product_id', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('nda_type', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'products',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProteinClassification',
            fields=[
                ('protein_class_id', models.IntegerField(primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
                ('pref_name', models.CharField(blank=True, max_length=500, null=True)),
                ('short_name', models.CharField(blank=True, max_length=50, null=True)),
                ('protein_class_desc', models.CharField(max_length=410)),
                ('definition', models.CharField(blank=True, max_length=4000, null=True)),
                ('class_level', models.IntegerField()),
            ],
            options={
                'db_table': 'protein_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProteinClassSynonyms',
            fields=[
                ('protclasssyn_id', models.IntegerField(primary_key=True, serialize=False)),
                ('protein_class_synonym', models.CharField(blank=True, max_length=1000, null=True)),
                ('syn_type', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'protein_class_synonyms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProteinFamilyClassification',
            fields=[
                ('protein_class_id', models.IntegerField(primary_key=True, serialize=False)),
                ('protein_class_desc', models.CharField(max_length=810, unique=True)),
                ('l1', models.CharField(max_length=100)),
                ('l2', models.CharField(blank=True, max_length=100, null=True)),
                ('l3', models.CharField(blank=True, max_length=100, null=True)),
                ('l4', models.CharField(blank=True, max_length=100, null=True)),
                ('l5', models.CharField(blank=True, max_length=100, null=True)),
                ('l6', models.CharField(blank=True, max_length=100, null=True)),
                ('l7', models.CharField(blank=True, max_length=100, null=True)),
                ('l8', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'protein_family_classification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelationshipType',
            fields=[
                ('relationship_type', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('relationship_desc', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'db_table': 'relationship_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchCompanies',
            fields=[
                ('co_stem_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('previous_company', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'research_companies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchStem',
            fields=[
                ('res_stem_id', models.IntegerField(primary_key=True, serialize=False)),
                ('research_stem', models.CharField(blank=True, max_length=20, null=True, unique=True)),
            ],
            options={
                'db_table': 'research_stem',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('fimm_id', models.TextField(blank=True, null=True)),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('gene_symbol', models.TextField(blank=True, null=True)),
                ('standard_type', models.TextField(blank=True, null=True)),
                ('standard_relation', models.TextField(blank=True, null=True)),
                ('standard_value', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('standard_units', models.TextField(blank=True, null=True)),
                ('mutation_status', models.TextField(blank=True, null=True)),
                ('mutation', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rix',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.CharField(blank=True, max_length=150, null=True)),
                ('standard_inchi_key', models.CharField(blank=True, max_length=150, null=True)),
                ('compound_name', models.CharField(blank=True, max_length=150, null=True)),
                ('target_id', models.CharField(blank=True, max_length=150, null=True)),
                ('target_pref_name', models.CharField(blank=True, max_length=150, null=True)),
                ('wildtype_or_mutant', models.CharField(blank=True, max_length=150, null=True)),
                ('mut_info', models.CharField(blank=True, max_length=150, null=True)),
                ('pubmed_id', models.CharField(blank=True, max_length=150, null=True)),
                ('ep_standard_type', models.CharField(blank=True, max_length=150, null=True)),
                ('ep_standard_relation', models.CharField(blank=True, max_length=150, null=True)),
                ('ep_standard_value', models.CharField(blank=True, max_length=150, null=True)),
                ('ep_standard_units', models.CharField(blank=True, max_length=150, null=True)),
                ('endpoint_actionmode_id', models.CharField(blank=True, max_length=150, null=True)),
                ('assay_format_id', models.CharField(blank=True, max_length=150, null=True)),
                ('assay_type_id', models.CharField(blank=True, max_length=150, null=True)),
                ('assay_sub_type_id', models.CharField(blank=True, max_length=150, null=True)),
                ('inhibitor_type_id', models.CharField(blank=True, max_length=150, null=True)),
                ('detection_technology_id', models.CharField(blank=True, max_length=150, null=True)),
                ('assay_cell_line', models.CharField(blank=True, max_length=150, null=True)),
                ('compound_single_conc_value', models.CharField(blank=True, max_length=150, null=True)),
                ('cscv_stand_unit', models.CharField(blank=True, max_length=150, null=True)),
                ('substrate_type', models.CharField(blank=True, max_length=150, null=True)),
                ('subs_standard_relation', models.CharField(blank=True, max_length=150, null=True)),
                ('subs_standard_value', models.CharField(blank=True, max_length=150, null=True)),
                ('subs_stand_units', models.CharField(blank=True, max_length=150, null=True)),
                ('title', models.CharField(blank=True, max_length=150, null=True)),
                ('journal', models.CharField(blank=True, max_length=150, null=True)),
                ('field_year', models.CharField(blank=True, db_column='_year', max_length=150, null=True)),
                ('volume', models.CharField(blank=True, max_length=150, null=True)),
                ('issue', models.CharField(blank=True, max_length=150, null=True)),
                ('authors', models.CharField(blank=True, max_length=150, null=True)),
                ('assay_id', models.CharField(blank=True, max_length=150, null=True)),
                ('assay_description', models.CharField(blank=True, max_length=150, null=True)),
                ('activity_comment', models.CharField(blank=True, max_length=150, null=True)),
                ('tid', models.CharField(blank=True, max_length=150, null=True)),
                ('activity_id', models.CharField(blank=True, max_length=150, null=True)),
                ('molregno', models.CharField(blank=True, max_length=150, null=True)),
                ('record_id', models.CharField(blank=True, max_length=150, null=True)),
                ('doc_id', models.CharField(blank=True, max_length=150, null=True)),
                ('annotation_comments', models.CharField(blank=True, max_length=150, null=True)),
                ('curator_email', models.CharField(blank=True, max_length=150, null=True)),
                ('weblink', models.CharField(blank=True, max_length=150, null=True)),
                ('data_resource', models.CharField(blank=True, max_length=150, null=True)),
                ('gene_names', models.CharField(blank=True, max_length=150, null=True)),
                ('abstract', models.CharField(blank=True, max_length=150, null=True)),
                ('status_id', models.CharField(blank=True, max_length=150, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=150, null=True)),
                ('time_stamp', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'sample',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sanger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('source_id', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sanger',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SiteComponents',
            fields=[
                ('sitecomp_id', models.IntegerField(primary_key=True, serialize=False)),
                ('site_residues', models.CharField(blank=True, max_length=2000, null=True)),
            ],
            options={
                'db_table': 'site_components',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialaccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=30)),
                ('uid', models.CharField(max_length=191)),
                ('last_login', models.DateTimeField()),
                ('date_joined', models.DateTimeField()),
                ('extra_data', models.TextField()),
            ],
            options={
                'db_table': 'socialaccount_socialaccount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialapp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=40)),
                ('client_id', models.CharField(max_length=191)),
                ('secret', models.CharField(max_length=191)),
                ('key', models.CharField(max_length=191)),
            ],
            options={
                'db_table': 'socialaccount_socialapp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialappSites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'socialaccount_socialapp_sites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialtoken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField()),
                ('token_secret', models.TextField()),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'socialaccount_socialtoken',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('src_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('src_description', models.CharField(blank=True, max_length=500, null=True)),
                ('src_short_name', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'source',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StructuralAlerts',
            fields=[
                ('alert_id', models.IntegerField(primary_key=True, serialize=False)),
                ('alert_name', models.CharField(max_length=100)),
                ('smarts', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'structural_alerts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StructuralAlertSets',
            fields=[
                ('alert_set_id', models.IntegerField(primary_key=True, serialize=False)),
                ('set_name', models.CharField(max_length=100, unique=True)),
                ('priority', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'structural_alert_sets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taipale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_name', models.TextField(blank=True, null=True)),
                ('compound_id', models.TextField(blank=True, null=True)),
                ('protein_name', models.TextField(blank=True, null=True)),
                ('protein_id', models.TextField(blank=True, null=True)),
                ('fold_change', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'taipale',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TargetComponents',
            fields=[
                ('targcomp_id', models.IntegerField(primary_key=True, serialize=False)),
                ('homologue', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'target_components',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TargetDictionary',
            fields=[
                ('tid', models.IntegerField(primary_key=True, serialize=False)),
                ('pref_name', models.CharField(max_length=200)),
                ('tax_id', models.BigIntegerField(blank=True, null=True)),
                ('organism', models.CharField(blank=True, max_length=150, null=True)),
                ('species_group_flag', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'target_dictionary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TargetIdMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniprotkbac', models.CharField(max_length=10)),
                ('id_type', models.CharField(blank=True, max_length=40, null=True)),
                ('id_value', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'target_id_mapping',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TargetRelations',
            fields=[
                ('relationship', models.CharField(max_length=20)),
                ('targrel_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'target_relations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TargetType',
            fields=[
                ('target_type', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('target_desc', models.CharField(blank=True, max_length=250, null=True)),
                ('parent_type', models.CharField(blank=True, max_length=25, null=True)),
            ],
            options={
                'db_table': 'target_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TissueDictionary',
            fields=[
                ('tissue_id', models.IntegerField(primary_key=True, serialize=False)),
                ('uberon_id', models.CharField(blank=True, max_length=15, null=True)),
                ('pref_name', models.CharField(max_length=200)),
                ('efo_id', models.CharField(blank=True, max_length=20, null=True)),
                ('bto_id', models.CharField(blank=True, max_length=20, null=True)),
                ('caloha_id', models.CharField(blank=True, max_length=7, null=True)),
            ],
            options={
                'db_table': 'tissue_dictionary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UbaoAssayType',
            fields=[
                ('pk_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, max_length=80, null=True, unique=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('user_stamp', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ubao_assay_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UcFikhbHierarchy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent', models.CharField(max_length=14)),
                ('child', models.CharField(max_length=14)),
                ('child_freq', models.BigIntegerField(blank=True, null=True)),
                ('child_inchi_len', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'uc_fikhb_hierarchy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UcLabels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fikhb', models.CharField(max_length=14)),
                ('label', models.CharField(blank=True, max_length=200, null=True)),
                ('inuse', models.BigIntegerField(blank=True, null=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('uration_comment', models.CharField(blank=True, max_length=400, null=True)),
                ('lastupdated', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'uc_labels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UcRelease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src_id', models.BigIntegerField(blank=True, null=True)),
                ('release_u', models.BigIntegerField(blank=True, null=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('src_release_number', models.BigIntegerField(blank=True, null=True)),
                ('src_release_date', models.DateField(blank=True, null=True)),
                ('userstamp', models.CharField(blank=True, max_length=20, null=True)),
                ('records_without_comments', models.BigIntegerField(blank=True, null=True)),
                ('records_with_comments', models.BigIntegerField(blank=True, null=True)),
                ('records_ignored', models.BigIntegerField(blank=True, null=True)),
                ('number_of_new_ucis', models.BigIntegerField(blank=True, null=True)),
                ('uc_load_index', models.BigIntegerField(blank=True, null=True)),
                ('misc', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'uc_release',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UcSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('src_id', models.BigIntegerField()),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('current_release_u', models.BigIntegerField(blank=True, null=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('last_updated', models.DateField(blank=True, null=True)),
                ('userstamp', models.CharField(blank=True, max_length=20, null=True)),
                ('number_or_date', models.CharField(blank=True, max_length=20, null=True)),
                ('name_long', models.CharField(blank=True, max_length=2000, null=True)),
                ('src_details', models.CharField(blank=True, max_length=2000, null=True)),
                ('src_url', models.CharField(blank=True, max_length=2000, null=True)),
                ('base_id_url', models.CharField(blank=True, max_length=2000, null=True)),
                ('base_id_url_available', models.BigIntegerField(blank=True, null=True)),
                ('aux_required', models.BigIntegerField(blank=True, null=True)),
                ('aux_for_url', models.BigIntegerField(blank=True, null=True)),
                ('aux_description', models.CharField(blank=True, max_length=4000, null=True)),
                ('private', models.BigIntegerField(blank=True, null=True)),
                ('name_label', models.CharField(blank=True, max_length=200, null=True)),
                ('src_class', models.BigIntegerField(blank=True, null=True)),
                ('keys_only', models.BigIntegerField(blank=True, null=True)),
                ('update_min', models.BigIntegerField(blank=True, null=True)),
                ('update_opt', models.BigIntegerField(blank=True, null=True)),
                ('update_max', models.BigIntegerField(blank=True, null=True)),
                ('update_j', models.BigIntegerField(blank=True, null=True)),
                ('update_comments', models.CharField(blank=True, max_length=500, null=True)),
                ('synonyms', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'uc_source',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UcStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uci', models.CharField(max_length=20)),
                ('standardinchi', models.CharField(blank=True, max_length=4000, null=True)),
                ('standardinchikey', models.CharField(blank=True, max_length=30, null=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('username', models.CharField(blank=True, max_length=20, null=True)),
                ('fikhb', models.CharField(blank=True, max_length=14, null=True)),
            ],
            options={
                'db_table': 'uc_structure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UcXref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uci', models.CharField(blank=True, max_length=20, null=True)),
                ('src_id', models.BigIntegerField(blank=True, null=True)),
                ('src_compound_id', models.CharField(blank=True, max_length=400, null=True)),
                ('assignment', models.BigIntegerField(blank=True, null=True)),
                ('last_release_u_when_current', models.BigIntegerField(blank=True, null=True)),
                ('created', models.DateField(blank=True, null=True)),
                ('lastupdated', models.DateField(blank=True, null=True)),
                ('userstamp', models.CharField(blank=True, max_length=20, null=True)),
                ('aux_src', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'uc_xref',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UniprotIdMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniprotkbac', models.CharField(max_length=20)),
                ('id_type', models.CharField(blank=True, max_length=40, null=True)),
                ('id_value', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'uniprot_id_mapping',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UniqueChemblId',
            fields=[
                ('chembl_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'unique_chembl_id',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UniqueTargetId',
            fields=[
                ('target_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'unique_target_id',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsanStems',
            fields=[
                ('usan_stem_id', models.IntegerField(primary_key=True, serialize=False)),
                ('stem', models.CharField(max_length=100)),
                ('subgroup', models.CharField(max_length=100)),
                ('annotation', models.CharField(blank=True, max_length=2000, null=True)),
                ('stem_class', models.CharField(blank=True, max_length=100, null=True)),
                ('major_class', models.CharField(blank=True, max_length=100, null=True)),
                ('who_extra', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'usan_stems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VariantSequences',
            fields=[
                ('variant_id', models.IntegerField(primary_key=True, serialize=False)),
                ('mutation', models.CharField(blank=True, max_length=2000, null=True)),
                ('accession', models.CharField(blank=True, max_length=25, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('isoform', models.IntegerField(blank=True, null=True)),
                ('sequence', models.TextField(blank=True, null=True)),
                ('organism', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'variant_sequences',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('creation_date', models.DateField(blank=True, null=True)),
                ('comments', models.CharField(blank=True, max_length=2000, null=True)),
            ],
            options={
                'db_table': 'version',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestionForReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_id', models.CharField(blank=True, max_length=20, null=True)),
                ('target_id', models.CharField(blank=True, max_length=250, null=True)),
                ('target_pref_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ep_standard_type', models.CharField(blank=True, max_length=250, null=True)),
                ('ep_standard_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('ep_standard_value', models.FloatField(blank=True, null=True)),
                ('ep_standard_units', models.CharField(blank=True, max_length=100, null=True)),
                ('activity_comment', models.CharField(blank=True, max_length=4000, null=True)),
                ('assay_description', models.TextField(blank=True, null=True)),
                ('authors', models.CharField(blank=True, max_length=4000, null=True)),
                ('annotation_comments', models.CharField(blank=True, max_length=4000, null=True)),
                ('status', models.CharField(blank=True, max_length=10, null=True)),
                ('curator_name', models.CharField(blank=True, max_length=30, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
                ('pubmed_id', models.BigIntegerField(blank=True, null=True)),
                ('assay_id', models.IntegerField(blank=True, null=True)),
                ('assay_type_id', models.SmallIntegerField(blank=True, null=True)),
                ('assay_format_id', models.SmallIntegerField(blank=True, null=True)),
                ('assay_sub_type_id', models.SmallIntegerField(blank=True, null=True)),
                ('inhibitor_type_id', models.SmallIntegerField(blank=True, null=True)),
                ('detection_technology_id', models.SmallIntegerField(blank=True, null=True)),
                ('endpoint_actionmode_id', models.SmallIntegerField(blank=True, null=True)),
                ('assay_cell_type', models.CharField(blank=True, max_length=100, null=True)),
                ('wildtype_or_mutant', models.CharField(blank=True, max_length=30, null=True)),
                ('mutation_info', models.CharField(blank=True, max_length=50, null=True)),
                ('substrate_type', models.TextField(blank=True, null=True)),
                ('compound_concentration_value', models.CharField(blank=True, max_length=30, null=True)),
                ('curator_email', models.TextField(blank=True, null=True)),
                ('journal', models.CharField(blank=True, max_length=50, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('volume', models.CharField(blank=True, max_length=50, null=True)),
                ('issue', models.CharField(blank=True, max_length=50, null=True)),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('compound_name', models.CharField(blank=True, max_length=4000, null=True)),
                ('compound_concentration_value_unit', models.CharField(blank=True, max_length=100, null=True)),
                ('substrate_relation', models.CharField(blank=True, max_length=30, null=True)),
                ('substrate_value', models.CharField(blank=True, max_length=50, null=True)),
                ('substrate_units', models.CharField(blank=True, max_length=50, null=True)),
                ('tid', models.IntegerField(blank=True, null=True)),
                ('activity_id', models.BigIntegerField(blank=True, null=True)),
                ('record_id', models.IntegerField(blank=True, null=True)),
                ('doc_id', models.IntegerField(blank=True, null=True)),
                ('molregno', models.IntegerField(blank=True, null=True)),
                ('standard_inchi_key', models.CharField(blank=True, max_length=27, null=True)),
                ('weblink', models.CharField(blank=True, max_length=300, null=True)),
                ('gene_names', models.CharField(blank=True, max_length=800, null=True)),
                ('annotations_flag', models.NullBooleanField()),
            ],
            options={
                'db_table': 'suggestion_for_review',
            },
        ),
        migrations.CreateModel(
            name='Biotherapeutics',
            fields=[
                ('molregno', models.ForeignKey(db_column='molregno', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='dtc.MoleculeDictionary')),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('helm_notation', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'biotherapeutics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundProperties',
            fields=[
                ('molregno', models.ForeignKey(db_column='molregno', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='dtc.MoleculeDictionary')),
                ('mw_freebase', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('alogp', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('hba', models.SmallIntegerField(blank=True, null=True)),
                ('hbd', models.SmallIntegerField(blank=True, null=True)),
                ('psa', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('rtb', models.SmallIntegerField(blank=True, null=True)),
                ('ro3_pass', models.CharField(blank=True, max_length=3, null=True)),
                ('num_ro5_violations', models.SmallIntegerField(blank=True, null=True)),
                ('acd_most_apka', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('acd_most_bpka', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('acd_logp', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('acd_logd', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('molecular_species', models.CharField(blank=True, max_length=50, null=True)),
                ('full_mwt', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('aromatic_rings', models.SmallIntegerField(blank=True, null=True)),
                ('heavy_atoms', models.SmallIntegerField(blank=True, null=True)),
                ('num_alerts', models.SmallIntegerField(blank=True, null=True)),
                ('qed_weighted', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('mw_monoisotopic', models.DecimalField(blank=True, decimal_places=4, max_digits=11, null=True)),
                ('full_molformula', models.CharField(blank=True, max_length=100, null=True)),
                ('hba_lipinski', models.SmallIntegerField(blank=True, null=True)),
                ('hbd_lipinski', models.SmallIntegerField(blank=True, null=True)),
                ('num_lipinski_ro5_violations', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compound_properties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompoundStructures',
            fields=[
                ('molregno', models.ForeignKey(db_column='molregno', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='dtc.MoleculeDictionary')),
                ('molfile', models.TextField(blank=True, null=True)),
                ('standard_inchi', models.CharField(blank=True, max_length=4000, null=True)),
                ('standard_inchi_key', models.CharField(max_length=27)),
                ('canonical_smiles', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'compound_structures',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LigandEff',
            fields=[
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='dtc.Activities')),
                ('bei', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('sei', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('le', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('lle', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
            ],
            options={
                'db_table': 'ligand_eff',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeHierarchy',
            fields=[
                ('molregno', models.ForeignKey(db_column='molregno', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='mh_molregno', serialize=False, to='dtc.MoleculeDictionary')),
            ],
            options={
                'db_table': 'molecule_hierarchy',
                'managed': False,
            },
        ),
    ]
